/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cheki.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import android.annotation.SuppressLint;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MpesaService {

  public interface Iface {

    public String message(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void message(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String message(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance) throws org.apache.thrift.TException
    {
      send_message(transType, transResult, transId, entity, entityNumber, amount, date, time, balance);
      return recv_message();
    }

    public void send_message(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance) throws org.apache.thrift.TException
    {
      message_args args = new message_args();
      args.setTransType(transType);
      args.setTransResult(transResult);
      args.setTransId(transId);
      args.setEntity(entity);
      args.setEntityNumber(entityNumber);
      args.setAmount(amount);
      args.setDate(date);
      args.setTime(time);
      args.setBalance(balance);
      sendBase("message", args);
    }

    public String recv_message() throws org.apache.thrift.TException
    {
      message_result result = new message_result();
      receiveBase(result, "message");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "message failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void message(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      message_call method_call = new message_call(transType, transResult, transId, entity, entityNumber, amount, date, time, balance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class message_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transType;
      private String transResult;
      private String transId;
      private String entity;
      private String entityNumber;
      private String amount;
      private String date;
      private String time;
      private String balance;
      public message_call(String transType, String transResult, String transId, String entity, String entityNumber, String amount, String date, String time, String balance, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transType = transType;
        this.transResult = transResult;
        this.transId = transId;
        this.entity = entity;
        this.entityNumber = entityNumber;
        this.amount = amount;
        this.date = date;
        this.time = time;
        this.balance = balance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("message", org.apache.thrift.protocol.TMessageType.CALL, 0));
        message_args args = new message_args();
        args.setTransType(transType);
        args.setTransResult(transResult);
        args.setTransId(transId);
        args.setEntity(entity);
        args.setEntityNumber(entityNumber);
        args.setAmount(amount);
        args.setDate(date);
        args.setTime(time);
        args.setBalance(balance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_message();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("message", new message());
      return processMap;
    }

    public static class message<I extends Iface> extends org.apache.thrift.ProcessFunction<I, message_args> {
      public message() {
        super("message");
      }

      public message_args getEmptyArgsInstance() {
        return new message_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public message_result getResult(I iface, message_args args) throws org.apache.thrift.TException {
        message_result result = new message_result();
        result.success = iface.message(args.transType, args.transResult, args.transId, args.entity, args.entityNumber, args.amount, args.date, args.time, args.balance);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("message", new message());
      return processMap;
    }

    public static class message<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, message_args, String> {
      public message() {
        super("message");
      }

      public message_args getEmptyArgsInstance() {
        return new message_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            message_result result = new message_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            message_result result = new message_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, message_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.message(args.transType, args.transResult, args.transId, args.entity, args.entityNumber, args.amount, args.date, args.time, args.balance,resultHandler);
      }
    }

  }

  @SuppressLint("NewApi")
public static class message_args implements org.apache.thrift.TBase<message_args, message_args._Fields>, java.io.Serializable, Cloneable, Comparable<message_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("message_args");

    private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRANS_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("transResult", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TRANS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ENTITY_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("entityNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new message_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new message_argsTupleSchemeFactory());
    }

    public String transType; // required
    public String transResult; // required
    public String transId; // required
    public String entity; // required
    public String entityNumber; // required
    public String amount; // required
    public String date; // required
    public String time; // required
    public String balance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANS_TYPE((short)1, "transType"),
      TRANS_RESULT((short)2, "transResult"),
      TRANS_ID((short)3, "transId"),
      ENTITY((short)4, "entity"),
      ENTITY_NUMBER((short)5, "entityNumber"),
      AMOUNT((short)6, "amount"),
      DATE((short)7, "date"),
      TIME((short)8, "time"),
      BALANCE((short)9, "balance");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANS_TYPE
            return TRANS_TYPE;
          case 2: // TRANS_RESULT
            return TRANS_RESULT;
          case 3: // TRANS_ID
            return TRANS_ID;
          case 4: // ENTITY
            return ENTITY;
          case 5: // ENTITY_NUMBER
            return ENTITY_NUMBER;
          case 6: // AMOUNT
            return AMOUNT;
          case 7: // DATE
            return DATE;
          case 8: // TIME
            return TIME;
          case 9: // BALANCE
            return BALANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANS_RESULT, new org.apache.thrift.meta_data.FieldMetaData("transResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRANS_ID, new org.apache.thrift.meta_data.FieldMetaData("transId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITY_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("entityNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(message_args.class, metaDataMap);
    }

    public message_args() {
    }

    public message_args(
      String transType,
      String transResult,
      String transId,
      String entity,
      String entityNumber,
      String amount,
      String date,
      String time,
      String balance)
    {
      this();
      this.transType = transType;
      this.transResult = transResult;
      this.transId = transId;
      this.entity = entity;
      this.entityNumber = entityNumber;
      this.amount = amount;
      this.date = date;
      this.time = time;
      this.balance = balance;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public message_args(message_args other) {
      if (other.isSetTransType()) {
        this.transType = other.transType;
      }
      if (other.isSetTransResult()) {
        this.transResult = other.transResult;
      }
      if (other.isSetTransId()) {
        this.transId = other.transId;
      }
      if (other.isSetEntity()) {
        this.entity = other.entity;
      }
      if (other.isSetEntityNumber()) {
        this.entityNumber = other.entityNumber;
      }
      if (other.isSetAmount()) {
        this.amount = other.amount;
      }
      if (other.isSetDate()) {
        this.date = other.date;
      }
      if (other.isSetTime()) {
        this.time = other.time;
      }
      if (other.isSetBalance()) {
        this.balance = other.balance;
      }
    }

    public message_args deepCopy() {
      return new message_args(this);
    }

    @Override
    public void clear() {
      this.transType = null;
      this.transResult = null;
      this.transId = null;
      this.entity = null;
      this.entityNumber = null;
      this.amount = null;
      this.date = null;
      this.time = null;
      this.balance = null;
    }

    public String getTransType() {
      return this.transType;
    }

    public message_args setTransType(String transType) {
      this.transType = transType;
      return this;
    }

    public void unsetTransType() {
      this.transType = null;
    }

    /** Returns true if field transType is set (has been assigned a value) and false otherwise */
    public boolean isSetTransType() {
      return this.transType != null;
    }

    public void setTransTypeIsSet(boolean value) {
      if (!value) {
        this.transType = null;
      }
    }

    public String getTransResult() {
      return this.transResult;
    }

    public message_args setTransResult(String transResult) {
      this.transResult = transResult;
      return this;
    }

    public void unsetTransResult() {
      this.transResult = null;
    }

    /** Returns true if field transResult is set (has been assigned a value) and false otherwise */
    public boolean isSetTransResult() {
      return this.transResult != null;
    }

    public void setTransResultIsSet(boolean value) {
      if (!value) {
        this.transResult = null;
      }
    }

    public String getTransId() {
      return this.transId;
    }

    public message_args setTransId(String transId) {
      this.transId = transId;
      return this;
    }

    public void unsetTransId() {
      this.transId = null;
    }

    /** Returns true if field transId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransId() {
      return this.transId != null;
    }

    public void setTransIdIsSet(boolean value) {
      if (!value) {
        this.transId = null;
      }
    }

    public String getEntity() {
      return this.entity;
    }

    public message_args setEntity(String entity) {
      this.entity = entity;
      return this;
    }

    public void unsetEntity() {
      this.entity = null;
    }

    /** Returns true if field entity is set (has been assigned a value) and false otherwise */
    public boolean isSetEntity() {
      return this.entity != null;
    }

    public void setEntityIsSet(boolean value) {
      if (!value) {
        this.entity = null;
      }
    }

    public String getEntityNumber() {
      return this.entityNumber;
    }

    public message_args setEntityNumber(String entityNumber) {
      this.entityNumber = entityNumber;
      return this;
    }

    public void unsetEntityNumber() {
      this.entityNumber = null;
    }

    /** Returns true if field entityNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityNumber() {
      return this.entityNumber != null;
    }

    public void setEntityNumberIsSet(boolean value) {
      if (!value) {
        this.entityNumber = null;
      }
    }

    public String getAmount() {
      return this.amount;
    }

    public message_args setAmount(String amount) {
      this.amount = amount;
      return this;
    }

    public void unsetAmount() {
      this.amount = null;
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    public boolean isSetAmount() {
      return this.amount != null;
    }

    public void setAmountIsSet(boolean value) {
      if (!value) {
        this.amount = null;
      }
    }

    public String getDate() {
      return this.date;
    }

    public message_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public String getTime() {
      return this.time;
    }

    public message_args setTime(String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public String getBalance() {
      return this.balance;
    }

    public message_args setBalance(String balance) {
      this.balance = balance;
      return this;
    }

    public void unsetBalance() {
      this.balance = null;
    }

    /** Returns true if field balance is set (has been assigned a value) and false otherwise */
    public boolean isSetBalance() {
      return this.balance != null;
    }

    public void setBalanceIsSet(boolean value) {
      if (!value) {
        this.balance = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANS_TYPE:
        if (value == null) {
          unsetTransType();
        } else {
          setTransType((String)value);
        }
        break;

      case TRANS_RESULT:
        if (value == null) {
          unsetTransResult();
        } else {
          setTransResult((String)value);
        }
        break;

      case TRANS_ID:
        if (value == null) {
          unsetTransId();
        } else {
          setTransId((String)value);
        }
        break;

      case ENTITY:
        if (value == null) {
          unsetEntity();
        } else {
          setEntity((String)value);
        }
        break;

      case ENTITY_NUMBER:
        if (value == null) {
          unsetEntityNumber();
        } else {
          setEntityNumber((String)value);
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          setAmount((String)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case BALANCE:
        if (value == null) {
          unsetBalance();
        } else {
          setBalance((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANS_TYPE:
        return getTransType();

      case TRANS_RESULT:
        return getTransResult();

      case TRANS_ID:
        return getTransId();

      case ENTITY:
        return getEntity();

      case ENTITY_NUMBER:
        return getEntityNumber();

      case AMOUNT:
        return getAmount();

      case DATE:
        return getDate();

      case TIME:
        return getTime();

      case BALANCE:
        return getBalance();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANS_TYPE:
        return isSetTransType();
      case TRANS_RESULT:
        return isSetTransResult();
      case TRANS_ID:
        return isSetTransId();
      case ENTITY:
        return isSetEntity();
      case ENTITY_NUMBER:
        return isSetEntityNumber();
      case AMOUNT:
        return isSetAmount();
      case DATE:
        return isSetDate();
      case TIME:
        return isSetTime();
      case BALANCE:
        return isSetBalance();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof message_args)
        return this.equals((message_args)that);
      return false;
    }

    public boolean equals(message_args that) {
      if (that == null)
        return false;

      boolean this_present_transType = true && this.isSetTransType();
      boolean that_present_transType = true && that.isSetTransType();
      if (this_present_transType || that_present_transType) {
        if (!(this_present_transType && that_present_transType))
          return false;
        if (!this.transType.equals(that.transType))
          return false;
      }

      boolean this_present_transResult = true && this.isSetTransResult();
      boolean that_present_transResult = true && that.isSetTransResult();
      if (this_present_transResult || that_present_transResult) {
        if (!(this_present_transResult && that_present_transResult))
          return false;
        if (!this.transResult.equals(that.transResult))
          return false;
      }

      boolean this_present_transId = true && this.isSetTransId();
      boolean that_present_transId = true && that.isSetTransId();
      if (this_present_transId || that_present_transId) {
        if (!(this_present_transId && that_present_transId))
          return false;
        if (!this.transId.equals(that.transId))
          return false;
      }

      boolean this_present_entity = true && this.isSetEntity();
      boolean that_present_entity = true && that.isSetEntity();
      if (this_present_entity || that_present_entity) {
        if (!(this_present_entity && that_present_entity))
          return false;
        if (!this.entity.equals(that.entity))
          return false;
      }

      boolean this_present_entityNumber = true && this.isSetEntityNumber();
      boolean that_present_entityNumber = true && that.isSetEntityNumber();
      if (this_present_entityNumber || that_present_entityNumber) {
        if (!(this_present_entityNumber && that_present_entityNumber))
          return false;
        if (!this.entityNumber.equals(that.entityNumber))
          return false;
      }

      boolean this_present_amount = true && this.isSetAmount();
      boolean that_present_amount = true && that.isSetAmount();
      if (this_present_amount || that_present_amount) {
        if (!(this_present_amount && that_present_amount))
          return false;
        if (!this.amount.equals(that.amount))
          return false;
      }

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      boolean this_present_balance = true && this.isSetBalance();
      boolean that_present_balance = true && that.isSetBalance();
      if (this_present_balance || that_present_balance) {
        if (!(this_present_balance && that_present_balance))
          return false;
        if (!this.balance.equals(that.balance))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(message_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransResult()).compareTo(other.isSetTransResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transResult, other.transResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransId()).compareTo(other.isSetTransId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transId, other.transId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityNumber()).compareTo(other.isSetEntityNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityNumber, other.entityNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBalance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("message_args(");
      boolean first = true;

      sb.append("transType:");
      if (this.transType == null) {
        sb.append("null");
      } else {
        sb.append(this.transType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transResult:");
      if (this.transResult == null) {
        sb.append("null");
      } else {
        sb.append(this.transResult);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transId:");
      if (this.transId == null) {
        sb.append("null");
      } else {
        sb.append(this.transId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityNumber:");
      if (this.entityNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.entityNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("amount:");
      if (this.amount == null) {
        sb.append("null");
      } else {
        sb.append(this.amount);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("balance:");
      if (this.balance == null) {
        sb.append("null");
      } else {
        sb.append(this.balance);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class message_argsStandardSchemeFactory implements SchemeFactory {
      public message_argsStandardScheme getScheme() {
        return new message_argsStandardScheme();
      }
    }

    private static class message_argsStandardScheme extends StandardScheme<message_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, message_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transType = iprot.readString();
                struct.setTransTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANS_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transResult = iprot.readString();
                struct.setTransResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRANS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transId = iprot.readString();
                struct.setTransIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entity = iprot.readString();
                struct.setEntityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENTITY_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entityNumber = iprot.readString();
                struct.setEntityNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.amount = iprot.readString();
                struct.setAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // BALANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.balance = iprot.readString();
                struct.setBalanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, message_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transType != null) {
          oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
          oprot.writeString(struct.transType);
          oprot.writeFieldEnd();
        }
        if (struct.transResult != null) {
          oprot.writeFieldBegin(TRANS_RESULT_FIELD_DESC);
          oprot.writeString(struct.transResult);
          oprot.writeFieldEnd();
        }
        if (struct.transId != null) {
          oprot.writeFieldBegin(TRANS_ID_FIELD_DESC);
          oprot.writeString(struct.transId);
          oprot.writeFieldEnd();
        }
        if (struct.entity != null) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          oprot.writeString(struct.entity);
          oprot.writeFieldEnd();
        }
        if (struct.entityNumber != null) {
          oprot.writeFieldBegin(ENTITY_NUMBER_FIELD_DESC);
          oprot.writeString(struct.entityNumber);
          oprot.writeFieldEnd();
        }
        if (struct.amount != null) {
          oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
          oprot.writeString(struct.amount);
          oprot.writeFieldEnd();
        }
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        if (struct.balance != null) {
          oprot.writeFieldBegin(BALANCE_FIELD_DESC);
          oprot.writeString(struct.balance);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class message_argsTupleSchemeFactory implements SchemeFactory {
      public message_argsTupleScheme getScheme() {
        return new message_argsTupleScheme();
      }
    }

    private static class message_argsTupleScheme extends TupleScheme<message_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransType()) {
          optionals.set(0);
        }
        if (struct.isSetTransResult()) {
          optionals.set(1);
        }
        if (struct.isSetTransId()) {
          optionals.set(2);
        }
        if (struct.isSetEntity()) {
          optionals.set(3);
        }
        if (struct.isSetEntityNumber()) {
          optionals.set(4);
        }
        if (struct.isSetAmount()) {
          optionals.set(5);
        }
        if (struct.isSetDate()) {
          optionals.set(6);
        }
        if (struct.isSetTime()) {
          optionals.set(7);
        }
        if (struct.isSetBalance()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetTransType()) {
          oprot.writeString(struct.transType);
        }
        if (struct.isSetTransResult()) {
          oprot.writeString(struct.transResult);
        }
        if (struct.isSetTransId()) {
          oprot.writeString(struct.transId);
        }
        if (struct.isSetEntity()) {
          oprot.writeString(struct.entity);
        }
        if (struct.isSetEntityNumber()) {
          oprot.writeString(struct.entityNumber);
        }
        if (struct.isSetAmount()) {
          oprot.writeString(struct.amount);
        }
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
        if (struct.isSetBalance()) {
          oprot.writeString(struct.balance);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.transType = iprot.readString();
          struct.setTransTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transResult = iprot.readString();
          struct.setTransResultIsSet(true);
        }
        if (incoming.get(2)) {
          struct.transId = iprot.readString();
          struct.setTransIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.entity = iprot.readString();
          struct.setEntityIsSet(true);
        }
        if (incoming.get(4)) {
          struct.entityNumber = iprot.readString();
          struct.setEntityNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.amount = iprot.readString();
          struct.setAmountIsSet(true);
        }
        if (incoming.get(6)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
        if (incoming.get(7)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.balance = iprot.readString();
          struct.setBalanceIsSet(true);
        }
      }
    }

  }

  @SuppressLint("NewApi")
public static class message_result implements org.apache.thrift.TBase<message_result, message_result._Fields>, java.io.Serializable, Cloneable, Comparable<message_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("message_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new message_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new message_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(message_result.class, metaDataMap);
    }

    public message_result() {
    }

    public message_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public message_result(message_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public message_result deepCopy() {
      return new message_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public message_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof message_result)
        return this.equals((message_result)that);
      return false;
    }

    public boolean equals(message_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(message_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("message_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class message_resultStandardSchemeFactory implements SchemeFactory {
      public message_resultStandardScheme getScheme() {
        return new message_resultStandardScheme();
      }
    }

    private static class message_resultStandardScheme extends StandardScheme<message_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, message_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, message_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class message_resultTupleSchemeFactory implements SchemeFactory {
      public message_resultTupleScheme getScheme() {
        return new message_resultTupleScheme();
      }
    }

    private static class message_resultTupleScheme extends TupleScheme<message_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
